<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
  <!--读取数据库配置信息 -->
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list merge="default">
        <value>/conf/database.properties</value>
      </list>
    </property>
  </bean>

  <!--[BEGIN]本机数据库：抓取源数据存储-->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" lazy-init="false">
    <property name="driverClassName" value="${local.mysql.driverClassName}"/>
    <property name="url" value="${local.mysql.url}"/>
    <property name="username" value="${local.mysql.username}"/>
    <property name="password" value="${local.mysql.password}"/>
    <property name="initialSize" value="500"/>
    <property name="maxActive" value="5000"/>
    <property name="maxWait" value="600000"/>
    <property name="poolPreparedStatements" value="true"/>
    <property name="maxOpenPreparedStatements" value="300"/>
    <property name="testOnBorrow"><value>false</value></property>
    <property name="validationQuery"><value>select 1 from dual</value></property>
    <property name="timeBetweenEvictionRunsMillis" value="30000"></property>
  </bean>
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>
  <bean id="sqlSessionFactory" class="com.spiritdata.framework.ext.spring.mybatis.MySqlSessionFactoryBean">
    <property name="configLocations">
      <list merge="default">
        <value>classpath*:mybatisConfig/frameworkMybatis.xml</value>
        <value>classpath*:mybatisConfig/*.mappers.cfg.xml</value>
      </list>
    </property>
    <property name="databaseType" value="MySql"/>
    <property name="dataSource" ref="dataSource"/>
    <property name="transactionFactory">
      <bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />
    </property>
  </bean>
  <bean id="defaultDAO" class="com.spiritdata.framework.core.dao.mybatis.MybatisDAO"  scope="prototype" init-method="initialize">
    <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
  </bean>
  <!--[END]本机数据库：抓取源数据存储-->
  
   <!--[BEGIN]内容快照库-->
  <bean id="dataSource_CacheDB" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" lazy-init="false">
    <property name="driverClassName" value="${cacheDB.mysql.driverClassName}"/>
    <property name="url" value="${cacheDB.mysql.url}"/>
    <property name="username" value="${cacheDB.mysql.username}"/>
    <property name="password" value="${cacheDB.mysql.password}"/>
    <property name="initialSize" value="500"/>
    <property name="maxActive" value="5000"/>
    <property name="maxWait" value="60000"/>
    <property name="poolPreparedStatements" value="true"/>
    <property name="maxOpenPreparedStatements" value="30"/>
    <property name="testOnBorrow"><value>false</value></property>
    <property name="validationQuery"><value>select 1 from dual</value></property>
  </bean>
  <bean id="transactionManager_CacheDB" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource_CacheDB"/>
  </bean>
  <bean id="sqlSessionFactory_CacheDB" class="com.spiritdata.framework.ext.spring.mybatis.MySqlSessionFactoryBean">
    <property name="configLocations">
      <list merge="default">
        <value>classpath*:mybatisConfig/frameworkMybatis.xml</value>
        <value>classpath*:mybatisConfig/*.mappers.cfg.xml</value>
      </list>
    </property>
    <property name="databaseType" value="MySql"/>
    <property name="dataSource" ref="dataSource_CacheDB"/>
    <property name="transactionFactory">
      <bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />
    </property>
  </bean>
  <bean id="defaultDAO_CacheDB" class="com.spiritdata.framework.core.dao.mybatis.MybatisDAO"  scope="prototype" init-method="initialize">
    <property name="sqlSessionFactory" ref="sqlSessionFactory_CacheDB"/>
  </bean>
  <!--[END]内容快照库-->

  <!--[BEGIN]内容管理主数据库-->
  <bean id="dataSource_CM" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" lazy-init="false">
    <property name="driverClassName" value="${wtMain.mysql.driverClassName}"/>
    <property name="url" value="${wtMain.mysql.url}"/>
    <property name="username" value="${wtMain.mysql.username}"/>
    <property name="password" value="${wtMain.mysql.password}"/>
    <property name="initialSize" value="500"/>
    <property name="maxActive" value="5000"/>
    <property name="maxWait" value="60000"/>
    <property name="poolPreparedStatements" value="true"/>
    <property name="maxOpenPreparedStatements" value="30"/>
    <property name="testOnBorrow"><value>false</value></property>
    <property name="validationQuery"><value>select 1 from dual</value></property>
  </bean>
  <bean id="transactionManager_CM" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource_CM"/>
  </bean>
  <bean id="sqlSessionFactory_CM" class="com.spiritdata.framework.ext.spring.mybatis.MySqlSessionFactoryBean">
    <property name="configLocations">
      <list merge="default">
        <value>classpath*:mybatisConfig/frameworkMybatis.xml</value>
        <value>classpath*:mybatisConfig/*.mappers.cfg.xml</value>
      </list>
    </property>
    <property name="databaseType" value="MySql"/>
    <property name="dataSource" ref="dataSource_CM"/>
    <property name="transactionFactory">
      <bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />
    </property>
  </bean>
  <bean id="defaultDAO_CM" class="com.spiritdata.framework.core.dao.mybatis.MybatisDAO"  scope="prototype" init-method="initialize">
    <property name="sqlSessionFactory" ref="sqlSessionFactory_CM"/>
  </bean>
  <!--[END]本机数据库：抓取源数据存储-->
  
  <!-- 抓取Redis的配置 -->
  <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
    <property name="maxTotal" value="${redis.maxTotal}"/>
    <property name="maxIdle" value="${redis.maxIdle}"/>
    <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
    <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    <property name="testOnReturn" value="${redis.testOnReturn}"/>
  </bean>
  <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    <property name="hostName" value="${redisCrawler.host}"/>
    <property name="port" value="${redis.port}"/>
    <property name="password" value="${redis.password}"/>
    <property name="poolConfig" ref="poolConfig"/>
  </bean>
  
  <!-- 搜索Redis的配置 -->
  <bean id="poolConfigSearch" class="redis.clients.jedis.JedisPoolConfig">
    <property name="maxTotal" value="${redis.maxTotal}"/>
    <property name="maxIdle" value="${redis.maxIdle}"/>
    <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
    <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    <property name="testOnReturn" value="${redis.testOnReturn}"/>
  </bean>
  <bean id="connectionFactorySearch" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    <property name="hostName" value="${redis.host}"/>
    <property name="port" value="${redis.port}"/>
    <property name="password" value="${redis.password}"/>
    <property name="poolConfig" ref="poolConfigSearch"/>
  </bean>
  
  <!-- 内容Redis的配置 -->
  <bean id="poolConfigContent" class="redis.clients.jedis.JedisPoolConfig">
    <property name="maxTotal" value="${redis.maxTotal}"/>
    <property name="maxIdle" value="${redis.maxIdle}"/>
    <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
    <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    <property name="testOnReturn" value="${redis.testOnReturn}"/>
  </bean>
  <bean id="connectionFactoryContent" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    <property name="hostName" value="${redisContent.host}"/>
    <property name="port" value="${redis.port}"/>
    <property name="password" value="${redis.password}"/>
    <property name="poolConfig" ref="poolConfigContent"/>
  </bean>
  
  <!-- 定时加载功能 -->
  <bean id="timer" class="com.woting.crawler.core.timer.persis.po.TimerPo" scope="prototype">
    <property name="CronExpression" value="${timer.CronExpression}"/>
    <property name="PlayCountCronExpression" value="${timer.PlayCountCronExpression}"/>
    <property name="CategoryCronExpression" value="${timer.CategoryCronExpression}"/>
    <property name="BCPlayIsValidateCronExpression" value="${timer.BCPlayIsValidateCronExpression}"/>
    <property name="ShareCronExpression" value="${timer.ShareCronExpression}"/>
    <property name="CacheRefreshExpression" value="${timer.CacheRefreshExpression}"/>
    <property name="RedisRefreshExpression" value="${timer.RedisRefreshExpression}"/>
  </bean>
  
  <!-- 抓取计划加载功能 -->
  <bean id="scheme" class="com.woting.crawler.core.scheme.persis.po.SchemePo" scope="prototype">
    <property name="Schemenum" value="${scheme.Schemenum}"/>
    <property name="CrawlerExtent" value="${scheme.CrawlerExtent}"/>
    <property name="CralwerSwitch" value="${scheme.CralwerSwitch}"/>
    <property name="NumberOfCrawlers" value="${scheme.NumberOfCrawlers}"/>
    <property name="RedisDB" value="${scheme.RedisDB}"/>
    <property name="RedisSnapShootDB" value="${scheme.RedisSnapShootDB}"/>
    <property name="XMLYThread_Limit_Size" value="${scheme.XMLYThread_Limit_Size}"/>
    <property name="QTThread_Limit_Size" value="${scheme.QTThread_Limit_Size}"/>
    <property name="XMLYCachePath" value="${scheme.XMLYCachePath}"/>
    <property name="QTCachePath" value="${scheme.QTCachePath}"/>
  </bean>
  
  <!-- 搜索计划加载功能 -->
  <bean id="search" class="com.woting.crawler.core.search.persis.po.SearchPo" scope="prototype">
    <property name="RedisSearchContents" value="${search.RedisSearchContents}"/>
  </bean>
  
  <!-- 搜索计划加载功能 -->
  <bean id="share" class="com.woting.crawler.core.share.persis.po.SharePo" scope="prototype">
    <property name="wxAppId" value="${share.wxAppId}"/>
    <property name="wxAppSecret" value="${share.wxAppSecret}"/>
    <property name="RedisDB" value="${share.RedisDB}"/>
  </bean>
  
  <!-- 分享功能 -->
  <bean id="ossconfig" class="com.woting.cm.core.oss.persis.po.OssConfigPo" scope="prototype">
    <property name="Endpoint" value="${oss.Endpoint}"/>
    <property name="AccessKeyId" value="${oss.AccessKeyId}"/>
    <property name="AccessKeySecret" value="${oss.AccessKeySecret}"/>
    <property name="BucketName" value="${oss.BucketName}"/>
    <property name="TempFile" value="${oss.TempFile}"/>
  </bean>
  
    <!--定义连接管理器-->
    <bean id="connectionManager" class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager"
          destroy-method="close">
        <!-- 最大连接数 -->
        <property name="maxTotal" value="${http.maxTotal}"/>
        <!--设置每个主机最大的并发数-->
        <property name="defaultMaxPerRoute" value="${http.defaultMaxPerRoute}"/>
    </bean>

    <!--定义HttpClient构建器-->
    <bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder" factory-method="create">
        <property name="connectionManager" ref="connectionManager"/>
    </bean>

    <!--定义httpClient对象，该bean一定是多例的-->
    <bean id="httpClient" class="org.apache.http.impl.client.CloseableHttpClient" factory-bean="httpClientBuilder"
          factory-method="build" scope="prototype"></bean>
    <!--定义requestConfig构建器-->
    <bean id="requestConfigBuilder" class="org.apache.http.client.config.RequestConfig.Builder">
        <!--设置创建连接的最长时间-->
        <property name="connectTimeout" value="${http.connectTimeout}"/>
        <!--从连接池中获取到连接的最长时间-->
        <property name="connectionRequestTimeout" value="${http.connectionRequestTimeout}"/>
        <!--数据传输的最长时间-->
        <property name="socketTimeout" value="${http.socketTimeout}"/>
    </bean>
    <!--请求参数对象-->
    <bean class="org.apache.http.client.config.RequestConfig" factory-bean="requestConfigBuilder"
          factory-method="build"></bean>
    <!--定期清理无效连接-->
    <bean class="org.apache.http.impl.client.IdleConnectionEvictor" destroy-method="shutdown">
        <constructor-arg index="0" ref="connectionManager"/>
        <constructor-arg index="1" value="${http.maxIdleTime}"/>
        <constructor-arg index="2" value="MINUTES"/>
    </bean>
    
    <!--定义solr的server-->  
    <bean id="httpSolrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer">  
        <constructor-arg index="0" value="${solr.Url}"/>  
    <!-- 设置响应解析器 -->    
        <property name="parser">  
            <bean class="org.apache.solr.client.solrj.impl.XMLResponseParser"/>  
        </property>  
        <!-- 设置重试次数-->  
        <property name="maxRetries" value="${solr.maxRetries}"/>  
        <!-- 建立连接的最长时间 -->  
        <property name="connectionTimeout" value="${solr.connectionTimeout}"/>  
    </bean>

  <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
  <context:component-scan base-package="com.woting.crawler" use-default-filters="false">
    <context:include-filter type="regex" expression=".*.*Service"/>
  </context:component-scan>
  <context:component-scan base-package="com.woting.cm" use-default-filters="false">
    <context:include-filter type="regex" expression=".*.*Service"/>
  </context:component-scan>
</beans>